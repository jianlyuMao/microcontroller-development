C51 COMPILER V9.02   MATRIX_BUTTONS                                                        03/25/2019 13:49:38 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MATRIX_BUTTONS
OBJECT MODULE PLACED IN matrix_buttons.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE matrix_buttons.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2           ============================================================================
   3           Name        : matrix_buttons.c
   4           Author      : JianlyuMao
   5           Version     :
   6           Copyright   : Your copyright notice
   7           Description : Hello World in C, Ansi-style
   8           ============================================================================
   9           */
  10          
  11          #include <reg52.h>
  12          
  13          sbit ADDR0 = P1 ^ 0;
  14          sbit ADDR1 = P1 ^ 1;
  15          sbit ADDR2 = P1 ^ 2;
  16          sbit ADDR3 = P1 ^ 3;
  17          sbit ENLED = P1 ^ 4;
  18          sbit KEY_IN_1 = P2 ^ 4;
  19          sbit KEY_IN_2 = P2 ^ 5;
  20          sbit KEY_IN_3 = P2 ^ 6;
  21          sbit KEY_IN_4 = P2 ^ 7;
  22          sbit KEY_OUT_1 = P2 ^ 3;
  23          sbit KEY_OUT_2 = P2 ^ 2;
  24          sbit KEY_OUT_3 = P2 ^ 1;
  25          sbit KEY_OUT_4 = P2 ^ 0;
  26          
  27          unsigned char code LedMatrix[16][8]= {
  28                  {0xC3,0xC9,0xCC,0xCF,0xCF,0xCF,0xCF,0x00},                      // 1
  29                  {0xC3,0x99,0x9C,0xCF,0xF3,0xF9,0xFC,0x81},                      // 2
  30                  {0xC1,0xBF,0xBF,0x8F,0xF1,0x8F,0xBF,0xC1},                      // 3
  31                  {0xE7,0xC3,0x81,0x00,0xE7,0xE7,0xE7,0xE7},                      // arrow up
  32                  {0x87,0x93,0x99,0x9E,0x00,0x9F,0x9F,0x9F},                      // 4
  33                  {0xC3,0xDB,0xFB,0xC3,0xDF,0xDD,0xE3,0xFF},                      // 5
  34                  {0xC7,0xF3,0xF9,0xED,0xD5,0xD9,0xDB,0xE7},                      // 6
  35                  {0xF7,0xF3,0xF1,0x00,0x00,0xF1,0xF3,0xF7},                      // arrow left
  36                  {0x81,0x9F,0x9F,0xCF,0xE7,0xF3,0xF9,0xF9},                      // 7
  37                  {0xC3,0xDB,0xDB,0xC3,0xE7,0xDB,0xDB,0xC3},                      // 8
  38                  {0x81,0xBD,0xBD,0x81,0xBF,0xBF,0xBF,0x81},                      // 9
  39                  {0xE7,0xE7,0xE7,0xE7,0x00,0x81,0xC3,0xE7},                      // arrow down
  40                  {0xC3,0x99,0xBD,0xBD,0xBD,0xBD,0x99,0xC3},                      // 0
  41                  {0x24,0xB6,0xB6,0xA4,0xA4,0xAE,0xAE,0x24},                      // esc
  42                  {0x9F,0x9F,0x9F,0x9B,0x99,0x80,0x80,0xF9},                      // enter key
  43                  {0xEF,0xCF,0x8F,0x00,0x00,0x8F,0xCF,0xEF}                       // arrow right
  44          
  45          };
  46          
  47          unsigned char KeySta[4][4] = { { 1, 1, 1, 1 }, { 1, 1, 1, 1 }, { 1, 1, 1, 1 }, {
  48                          1, 1, 1, 1 } };
  49          
  50          unsigned char index;
  51          
  52          void main() {
  53   1              unsigned char i, j;
  54   1              unsigned char backup[4][4] = { { 1, 1, 1, 1 }, { 1, 1, 1, 1 },
  55   1                              { 1, 1, 1, 1 }, { 1, 1, 1, 1 } };
C51 COMPILER V9.02   MATRIX_BUTTONS                                                        03/25/2019 13:49:38 PAGE 2   

  56   1      
  57   1              EA = 1;
  58   1              ENLED = 0;
  59   1              ADDR3 = 0;
  60   1              ADDR2 = 0;
  61   1              ADDR1 = 0;
  62   1              ADDR0 = 0;
  63   1              TMOD = 0x01;
  64   1              TH0 = 0xFC;
  65   1              TL0 = 0x67;
  66   1              ET0 = 1;
  67   1              TR0 = 1;
  68   1      
  69   1              while (1) {
  70   2                      for (i = 0; i < 4; i++) {
  71   3                              for (j = 0; j < 4; j++) {
  72   4                                      if (backup[i][j] != KeySta[i][j]) {
  73   5                                              if (backup[i][j] != 0) {
  74   6                                                      index=i*4 +j;
  75   6                                              }
  76   5                                              backup[i][j] = KeySta[i][j];
  77   5                                      }
  78   4                              }
  79   3                      }
  80   2              }
  81   1      }
  82          
  83          void KeyScan(){
  84   1              unsigned char i;
  85   1              static unsigned char keyout=0;
  86   1              static unsigned char keybuf[4][4]={
  87   1                      {0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF},
  88   1                      {0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF}
  89   1              };
  90   1              
  91   1              keybuf[keyout][0]=(keybuf[keyout][0]<<1) | KEY_IN_1;
  92   1              keybuf[keyout][1]=(keybuf[keyout][1]<<1) | KEY_IN_2;
  93   1              keybuf[keyout][2]=(keybuf[keyout][2]<<1) | KEY_IN_3;
  94   1              keybuf[keyout][3]=(keybuf[keyout][3]<<1) | KEY_IN_4;
  95   1              
  96   1              for (i=0;i<4;i++){
  97   2                      if ((keybuf[keyout][i] & 0x0F)==0x00){
  98   3                              KeySta[keyout][i]=0;
  99   3                      }else if ((keybuf[keyout][i] & 0x0F)==0x0F){
 100   3                              KeySta[keyout][i]=1;
 101   3                      }
 102   2              }
 103   1              
 104   1              keyout++;
 105   1              keyout=keyout&0x03;
 106   1              switch(keyout){
 107   2                      case 0: KEY_OUT_4=1; KEY_OUT_1=0; break;
 108   2                      case 1: KEY_OUT_1=1; KEY_OUT_2=0; break;
 109   2                      case 2: KEY_OUT_2=1; KEY_OUT_3=0; break;
 110   2                      case 3: KEY_OUT_3=1; KEY_OUT_4=0; break;
 111   2                      default: break;
 112   2              }
 113   1      }
 114          
 115          void LedScan(){
 116   1              static unsigned char i=0;
 117   1              
C51 COMPILER V9.02   MATRIX_BUTTONS                                                        03/25/2019 13:49:38 PAGE 3   

 118   1              P0=0xFF;
 119   1              switch(i){
 120   2                      case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedMatrix[index][0];break;
 121   2                      case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedMatrix[index][1];break;
 122   2                      case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedMatrix[index][2];break;
 123   2                      case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedMatrix[index][3];break;
 124   2                      case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedMatrix[index][4];break;
 125   2                      case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedMatrix[index][5];break;
 126   2                      case 6: ADDR2=1; ADDR1=1; ADDR0=0; i++; P0=LedMatrix[index][6];break;
 127   2                      case 7: ADDR2=1; ADDR1=1; ADDR0=1; i=0; P0=LedMatrix[index][7];break;
 128   2                      default: break;
 129   2              }
 130   1      }
 131          
 132          
 133          void InterruptTimer0() interrupt 1{
 134   1              TH0=0xFC;
 135   1              TL0=0x67;
 136   1              LedScan();
 137   1              KeyScan();
 138   1      }
 139          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    600    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     35      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
